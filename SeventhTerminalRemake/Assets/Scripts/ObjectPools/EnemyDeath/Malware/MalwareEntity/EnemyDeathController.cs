using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Pool;

public class EnemyDeathController : MonoBehaviour, IDamageable
{
    private ObjectPool<EnemyDeathController> _pool;
    public VirusInstance virus;
    public int score = 1;
    public float speed = 10f;
    public float maxHealth = 15f;
    public float health;
    public GameManager currentState;
    public EnemyDeathEffectController enemyKill;
    public EnemySpawner enemyRelease;
    public ParticleSystem enemyHit;
    [SerializeField] bool canMove;
    [SerializeField] AudioClip virusSoundClip;
    [SerializeField] AudioClip virusDeathClip;
    [SerializeField] AudioClip virusSpawnClip;
    [SerializeField] AudioSource virusDeathAudio;
    [SerializeField] AudioSource virusSource;
    GameObject target;
    bool gameManagerOverride;



    EnemyDeathEffectPool enemyEffectPool;


    private void Start()
    {
        health = maxHealth;
        //Get enemy pool component 
        enemyEffectPool = GetComponent<EnemyDeathEffectPool>();
        //Get the enemy spawner, game manager and player. Since these objects are in the scene, we use find to get them
        enemyRelease = GameObject.Find("EnemySpawner").GetComponent<EnemySpawner>();
        currentState = GameObject.Find("Game Manager").GetComponent<GameManager>();
        target = GameObject.Find("Player");
        virusSource = GetComponent<AudioSource>();
        virusSource.clip = virusSoundClip;
        virusDeathAudio.clip = virusDeathClip;
        virusSource.PlayOneShot(virusSpawnClip);
    }

    private void Update()
    {
        Movement();
    }

    void Movement()
    {
        if (currentState != null)
        {
            if (currentState.gameState == 1 || gameManagerOverride == true && canMove == true)
            {
                //Get the direction between enemy and player and move
                Vector3 targetDirection = target.transform.position - transform.position;
                Vector3 newDirection = Vector3.RotateTowards(transform.forward, targetDirection, speed * Time.deltaTime, 0.0f);
                transform.rotation = Quaternion.LookRotation(newDirection);

                transform.position += transform.forward * speed * Time.deltaTime;
            }
        }

        else
        {
            gameManagerOverride = true;
        }

    }
    public void TakeDamage(float amount)
    {
        //Reduce health by amount, then kill the enemy when health is 0
        health -= amount;
        if (health > 0)
        {
            enemyHit.Play();
            virusSource.spatialBlend = 0;
            virusSource.pitch = Random.Range(0.8f, 1.2f);
            virusSource.Play();
        }
        if (health <= 0)
        {
            StartCoroutine(OnDeath());
            //Get the death effect from the pool and called Kill function
        }
    }

    IEnumerator OnDeath()
    {
        virusDeathAudio.pitch = Random.Range(1f, 1.6f);
        virusDeathAudio.Play();
        yield return new WaitForSeconds(0.1f);
        enemyEffectPool._pool.Get();
        currentState.AddToScore(score);
        enemyRelease.Kill(this);
    }

    public void Damage(float damageAmount)
    {
        TakeDamage(damageAmount);
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.tag == "Player")
        {
            //When colliding with the player, kill the enemy and get the death effect
            enemyEffectPool._pool.Get();
            enemyRelease.Kill(this);

            Vector3 dir = (collision.transform.position - transform.position).normalized;
            //Set isKnockedBack to true
            collision.gameObject.GetComponent<KnockBack>().isKnockedBack = true;
            collision.gameObject.GetComponent<KnockBack>().direction = dir;
        }
    }

    public void SetPool(ObjectPool<EnemyDeathController> pool)
    {
        //Setting up the hit effect pool
        _pool = pool;
    }

    private void OnEnable()
    {
       
        virusSource.spatialBlend = 1;
        virusSource.pitch = 1f;
        virusSource.PlayOneShot(virusSpawnClip);
    }

    private void OnDisable()
    {
        if(enemyRelease.powerUp == true)
        {
            maxHealth *= 2;
            speed *= 2;
        }
        //Reset health when killed
        health = maxHealth;
    }
}
